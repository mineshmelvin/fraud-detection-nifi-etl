version: '3.8'
services:
  postgres:
    build:
      context: ./postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB = ${POSTGRES_DB}
      - POSTGRES_USER = ${POSTGRES_USER}
      - POSTGRES_PASSWORD = ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgres/data
    env_file:
      - ./postgres/postgres.env
    networks:
      - fraud_detection_net

  cassandra:
    build: ./cassandra
    container_name: cassandra_db
    ports:
      - "9042:9042"
    networks:
      - fraud_detection_net

  fraud_intelligence:
    build: ./fraud_intelligence  # Builds from the Dockerfile in this directory
    ports:
      - "5000:5000"
    networks:
      - fraud_detection_network

  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    networks:
      - fraud_detection_net

  kafka:
    image: bitname/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - ./kafka/kafka.env:/etc/kafka/kafka.env
      - ./kafka/create-topics.sh:/opt/kafka/scripts
    depends_on:
      - zookeeper
    networks:
      - fraud_detection_net

  kafka-setup:
    image: bitname/kafka:latest
    depends_on:
      - kafka
    entrypoint: [ "sh", "-c", "/opt/kafka/scripts/create-topics.sh" ]

  nifi:
    build:
      context: ./nifi
      dockerfile: Dockerfile
    ports:
      - "8080:8080"  # NiFi UI port
    volumes:
      - nifi_data:/opt/nifi/nifi-current/conf  # Persistent data
    environment:
      - NIFI_WEB_HTTP_PORT=8080
    depends_on:
      - postgres
      - mongodb
      - kafka
    networks:
      - fraud_detection_net

  spark:
    build:
      context: ./spark
    environment:
      - SPARK_MASTER_HOST=spark
    ports:
      - "7077:7077"
    depends_on:
      - kafka
      - postgres
      - mongodb
    volumes:
      - ./spark:/app
    command: [ "/entrypoint.sh" ]
    networks:
      - fraud_detection_net

networks:
  fraud_detection_net:
    driver: bridge

volumes:
  postgres_data:
  mongo_data: