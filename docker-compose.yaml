version: '3.8'
services:
  postgres:
    build:
      context: ./postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=the_melvin_bank_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=adminpassword
    volumes:
      - postgres_data:/var/lib/postgres/data
    env_file:
      - ./postgres/postgres.env
    networks:
      - fraud_detection_net

  cassandra:
    build: ./cassandra
    container_name: cassandra
    ports:
      - "9042:9042"
    networks:
      - fraud_detection_net

#  fraud_intelligence:
#    build: ./fraud_intelligence  # Builds from the Dockerfile in this directory
#    ports:
#      - "5000:5000"
#    networks:
#      - fraud_detection_network

  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    networks:
      - fraud_detection_net

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://localhost:9092,OUTSIDE://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    volumes:
      - ./kafka/kafka.env:/etc/kafka/kafka.env
      - ./kafka/create-topics.sh:/opt/kafka/scripts
    depends_on:
      - zookeeper
    networks:
      - fraud_detection_net

  kafka-setup:
    image: bitnami/kafka:latest
    depends_on:
      - kafka
    volumes:
      - ./kafka/create-topics.sh:/opt/kafka/scripts/create-topics.sh
    entrypoint: [ "sh", "-c", "/opt/kafka/scripts/create-topics.sh" ]
    networks:
      - fraud_detection_net

  nifi:
    build:
      context: ./nifi
      dockerfile: Dockerfile
    ports:
      - 8080:8080
      - 8443:8443
#    environment:
##      - NIFI_WEB_HOST:"localhost"
#      - SINGLE_USER_CREDENTIALS_USERNAME:admin
#      - SINGLE_USER_CREDENTIALS_PASSWORD:password
#      - NIFI_REMOTE_INPUT_HOST:"nifi"
#      - 8443:8443
#    depends_on:
#      - postgres
#      - kafka
#      - cassandra
    networks:
      - fraud_detection_net

  spark:
    build:
      context: ./spark
    environment:
      - SPARK_MASTER_HOST=spark
    ports:
      - "7077:7077"
    depends_on:
      - kafka
      - postgres
    volumes:
      - ./spark:/app
    command: [ "/entrypoint.sh" ]
    networks:
      - fraud_detection_net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_INSTALL_PLUGINS=vertamedia-cassandra-datasource  # Auto-install Cassandra plugin
    depends_on:
      - cassandra
    networks:
      - fraud_detection_net

networks:
  fraud_detection_net:
    driver: bridge

volumes:
  postgres_data:
  mongo_data: